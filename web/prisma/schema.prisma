// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String  @id @default(cuid())
  username    String? @unique
  displayName String?

  email         String?   @unique
  emailVerified DateTime?

  avatarUrl String?

  profession  String?
  location    String?
  pronouns    String?
  website     String?
  isSupporter Boolean @default(false)

  // --- Unused ---
  name  String?
  image String?
  // --- Unused ---

  role Role @default(USER)

  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]

  threads Thread[]
  replies Reply[]

  likes   ThreadLike[]
  reposts ThreadRepost[]

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  sentMessages     Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")

  notifications Notification[]
  threadReport  ThreadReport[]
  replyLike     ReplyLike[]
  replyRepost   ReplyRepost[]
}

enum MediaType {
  image
  video
}

model Thread {
  id            String     @id @default(cuid())
  textContent   String
  mediaType     MediaType?
  source        String?
  alt           String?
  highResSource String?
  width         Int?
  height        Int?
  urlEmbed      String?
  createdAt     DateTime   @default(now())

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  replies      Reply[]
  repliesCount Int     @default(0)

  likes     ThreadLike[]
  likeCount Int          @default(0)

  reposts     ThreadRepost[]
  repostCount Int            @default(0)

  threadReport ThreadReport[]
}

model ThreadLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([threadId, userId])
}

model ThreadRepost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([threadId, userId])
}

model Reply {
  id            String     @id @default(cuid())
  textContent   String
  mediaType     MediaType?
  source        String?
  alt           String?
  highResSource String?
  width         Int?
  height        Int?
  urlEmbed      String?
  createdAt     DateTime   @default(now())

  parent   Reply?  @relation("Replies", fields: [parentId], references: [id])
  parentId String?

  replies      Reply[] @relation("Replies")
  repliesCount Int     @default(0)

  likes     ReplyLike[]
  likeCount Int         @default(0)

  reposts     ReplyRepost[]
  repostCount Int           @default(0)

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
}

model ReplyLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([replyId, userId])
}

model ReplyRepost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([replyId, userId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation(name: "sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  receiver   User   @relation(name: "receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ThreadReport {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  reporter   User?   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String?
}
