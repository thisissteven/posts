// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String  @id @default(cuid())
  username    String? @unique
  displayName String?

  email         String?   @unique
  emailVerified DateTime?

  avatarUrl String?

  profession  String?
  location    String?
  pronouns    String?
  website     String?
  isSupporter Boolean @default(false)

  // --- Unused ---
  name  String?
  image String?
  // --- Unused ---

  role Role @default(USER)

  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]

  threads Thread[]

  likes   ThreadLike[]
  reposts ThreadRepost[]

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  blockedBy User[] @relation("UserBlocks")
  blocking  User[] @relation("UserBlocks")

  notifications Notification[]

  userReport   UserReport[]
  threadReport ThreadReport[]

  sentMessages     Room[] @relation("sentMessages")
  receivedMessages Room[] @relation("receivedMessages")

  messages Message[]

  likedByNotification    LikedByNotification[]
  followedByNotification FollowedByNotification[]
  repostedByNotification RepostedByNotification[]
  repliedByNotification  RepliedByNotification[]
}

enum MediaType {
  image
  video
}

model Thread {
  id            String     @id @default(cuid())
  textContent   String
  mediaType     MediaType?
  source        String?
  alt           String?
  highResSource String?
  width         Int?
  height        Int?

  embed Embed?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  replies Thread[] @relation("ThreadReplies")

  replyTo   Thread? @relation("ThreadReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replyToId String?

  repliesCount Int @default(0)

  likes     ThreadLike[]
  likeCount Int          @default(0)

  reposts     ThreadRepost[]
  repostCount Int            @default(0)

  threadReport ThreadReport[]

  notifications Notification[]
}

model Embed {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  url         String
  secureUrl   String?
  image       String?
  title       String?
  description String?

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String @unique
}

model ThreadLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([threadId, userId])
}

model ThreadRepost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([threadId, userId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  room           Room   @relation(fields: [roomIdentifier], references: [identifier])
  roomIdentifier String
}

model Room {
  identifier String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User   @relation(name: "sentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  receiverId String

  messages Message[]
}

enum NotificationType {
  LIKE
  REPOST
  FOLLOW
  REPLY
}

model Notification {
  id        String   @id
  createdAt DateTime @default(now())

  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  thread   Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String?

  type NotificationType

  likedByNotification    LikedByNotification[]
  repostedByNotification RepostedByNotification[]

  followedByNotification FollowedByNotification?
  repliedByNotification  RepliedByNotification?
}

model LikedByNotification {
  id String @id @default(cuid())

  likedBy   User   @relation(fields: [likedById], references: [id], onDelete: Cascade)
  likedById String

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
}

model FollowedByNotification {
  id String @id @default(cuid())

  followedBy   User   @relation(fields: [followedById], references: [id], onDelete: Cascade)
  followedById String

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String       @unique
}

model RepostedByNotification {
  id String @id @default(cuid())

  repostedBy   User   @relation(fields: [repostedById], references: [id], onDelete: Cascade)
  repostedById String

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
}

model RepliedByNotification {
  id String @id @default(cuid())

  repliedBy   User   @relation(fields: [repliedById], references: [id], onDelete: Cascade)
  repliedById String

  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String       @unique
}

model ThreadReport {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  reporter   User?   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String?
}

model UserReport {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())

  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
}
